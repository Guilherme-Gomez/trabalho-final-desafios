aluno <- "Guilherme"
#aluno <- "Davi"
if (aluno == "Guilherme") {
spark_path <-'C:/Guilherme/spark'
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = spark_path)
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig =
list(spark.driver.memory = "1g"))
pathfile = "C:/Guilherme/FGV/Desafios e Requisitos dos Projetos Analiticos/EFC_WAYSIDES.csv"
}else{
library(SparkR)
spark_path <-"C:/spark-3.1.2-bin-hadoop3.2"
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = spark_path)
}
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "6g"))
pathfile <- "C:/trabalho-final-desafios/EFC_WAYSIDES.csv"
}
paste("Configuração para o computador do: ",aluno)
sqlContext <- sparkR.session(sc)
sparkR.conf()
my.name <- readline(prompt="Enter name: ")
my.name
readname = function()# Get the project name
{
params$prjName
}
aluno=readname()
readname
readname
aluno=readname()
aluno <- readline(prompt="Enter name: ")
df
# Importar bibliotecas que serão utilizadas no trabalho
library(caret)
library(mlbench)
library(dplyr)
library(tidyverse)
library(gridExtra)
library(kableExtra)
library(hrbrthemes)
library(viridis)
# Iniciar sessão do SPARK
# Separando as melhores configurações para os computadores que cada integrante do grupo usa.
aluno <- "Guilherme"
#aluno <- "Davi"
#aluno <- readline(prompt="Enter name: ")
if (aluno == "Guilherme") {
spark_path <-'C:/Guilherme/spark'
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = spark_path)
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig =
list(spark.driver.memory = "1g"))
pathfile = "C:/Guilherme/FGV/Desafios e Requisitos dos Projetos Analiticos/EFC_WAYSIDES.csv"
}else{
library(SparkR)
spark_path <-"C:/spark-3.1.2-bin-hadoop3.2"
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = spark_path)
}
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "6g"))
pathfile <- "C:/trabalho-final-desafios/EFC_WAYSIDES.csv"
}
paste("Configuração para o computador do: ",aluno)
sqlContext <- sparkR.session(sc)
sparkR.conf()
# Importar dataset
# Utilizando o inferSchema muitos campos numéricos foram identificados com string.
schema <- structType(
structField("ROW_ID", "string"),
structField("DATA_HORA_LEITURA", "timestamp"),
structField("CODIGO_VAGAO", "string"),
structField("CODIGO_RODEIRO", "string"),
structField("CODIGO_RODA", "string"),
structField("LADO_RODA", "string"),
structField("EIXO_VAGAO", "double"),
structField("CICLO_RODEIRO", "string"),
structField("TRAIN_ID", "string"),
structField("SENTIDO_TREM", "string"),
structField("VELOCIDADE_ENTRADA_TREM", "double"),
structField("VELOCIDADE_SAIDA_TREM", "double"),
structField("POSICAO_VAGAO_COMPOSICAO", "double"),
structField("ANGULO_FRISO_RODA", "double"),
structField("ALTURA_FRISO_RODA", "double"),
structField("ESPESSURA_FRISO_RODA", "double"),
structField("CAVA_RODA", "double"),
structField("ANGULO_ATAQUE_EIXO_FRONTAL_TRUQUE", "double"),
structField("ANGULO_ATAQUE_EIXO_TRASEIRO_TRUQUE", "double"),
structField("TRACKING_POSITION_EIXO_FRONTAL_TRUQUE", "double"),
structField("TRACKING_POSITION_EIXO_TRASEIRO_TRUQUE", "double"),
structField("ROTACAO_EIXO", "double"),
structField("ALINHAMENTO_ENTRE_EIXOS_(IAM)", "double"),
structField("DESLOCAMENTO_ENTRE_EIXOS_(SHIFT)", "double"),
structField("TRACKING_ERROR_(TE)", "double"),
structField("SERPENTEAMENTO_(HUNTING)", "double"),
structField("friso_baixo", "double")
)
df <- SparkR::read.df(path = pathfile,
header='true',
source = "com.databricks.spark.csv",
schema = schema,
na.strings = "")
head(df)
cache(df)
#Criando novas colunas pelo método mais comum.
df$friso_baixo <- SparkR::ifelse(df$ESPESSURA_FRISO_RODA<26,1,0)
#Criando novas colunas e escolhendo o tipo de dado usanod withColumn.
df <- df %>%
withColumn(.,"Dia",cast(df$DATA_HORA_LEITURA,"Date")) #%>%
#withColumn(.,"Dia",cast(df$DATA_HORA_LEITURA,"Date"))
df_sample <- df %>% sample(withReplacement = F,fraction = 0.0005)
#read.df(sqlContext,)
# Incluir o arquivo na memória para facilitar a interação
persist(df,"MEMORY_ONLY")
#cache(df) == persist(df,"MEMORY_ONLY")
#cacheTable(sqlContext,"tableNmae")
#Usando a função agg
agg(df_sample, velo_entrada_avg = avg(df_sample$VELOCIDADE_ENTRADA_TREM)) %>% head()
agg(df_sample, velo_entrada_sd = sd(df_sample)) %>% head()
df
agg(df_sample, velo_entrada_sd = sd(df_sample$VELOCIDADE_ENTRADA_TREM)) %>% head()
printSchema(df)
printSchema(df) %>% as.data.frame()
printSchema(df) %>% as.data.frame()
dbl_cols = [f.name for f in df.schema.fields if isinstance(f.dataType, DoubleType)]
df.schema
df %>% class
colnames(df)
?/colnames
?colnames
coltypes(df)
cbind(coltypes(df),colnames(df))
cbind(coltypes(df),colnames(df)) %>% View()
cbind(coltypes(df),colnames(df)) %>% as.data.frame %>% View()
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter(V1=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter(V1=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter(.$V1=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>% View()
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter('V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter(.,'V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
filter(x = .,'V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
Filter(x = .,'V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
Filter('V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
Filter('V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
names(c("um","dois"))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
rename(c("um","dois"))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
colnames(c("um","dois"))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter('V1'=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(is.numeric('V1'))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(is.numeric(V1))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(is.numeric(.$V1))
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(V2)
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(V2) %>% dplyr::rename("colunas")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(V2) %>% dplyr::rename(V2,"colunas")
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(V2) %>% dplyr::rename("colunas",V2)
cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(medidas=V2)
for (coluna in colunas_numeric){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
print(coluna)
}
colunas_numeric <- cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(medidas=V2)
for (coluna in colunas_numeric){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
print(coluna)
}
?map
resumo_medidas <- list
for (coluna in colunas_numeric){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- agg(df_sample,
media = avg(coluna),
desvio_padrao = sd(coluna),
variancia = var(coluna),
maximo = max(coluna),
minimo = min(coluna))
}
coluna
colunas_numeric
resumo_medidas <- list
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- agg(df_sample,
media = avg(coluna),
desvio_padrao = sd(coluna),
variancia = var(coluna),
maximo = max(coluna),
minimo = min(coluna))
}
coluna
resumo_medidas <- list
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sampleagg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]]))
}
resumo_medidas <- list
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]]))
}
coluna
df_sample %>% agg(.,
media = avg(.[[coluna]]))
df_sample %>% agg(.,
media = avg(.[[coluna]])) %>% jhead
df_sample %>% agg(.,
media = avg(.[[coluna]])) %>% head()
resumo_medidas <- list
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head()
}
resumo_medidas
resumo_medidas[[1]]
coluna
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head()
resumo_medidas
resumo_medidas <- list()
resumo_medidas
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head()
}
resumo_medidas %>% View()
resumo_medidas.[["EIXO_VAGAO"]]
resumo_medidas %>% .[["EIXO_VAGAO"]]
resumo_medidas %>% unlist()
resumo_medidas <- data.frame()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head()
}
resumo_medidas %>% class
resumo_medidas %>% View()
resumo_medidas <- data.frame()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna,]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head()
}
resumo_medidas %>% View()
resumo_medidas <- data.frame()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna,]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head() %>% as.data.frame()
}
resumo_medidas %>% View()
resumo_medidas %>% class()
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head() %>% as.data.frame()
a <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head() %>% as.data.frame()
a %>% class()
a %>% View()
resumo_medidas <- list()
resumo_medidas <- list()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>% head() %>% as.data.frame()
}
resumo_medidas
resumo_medidas %>% View()
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist()
resumo_medidas
resumo_medidas <- list()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist() %>% as.data.frame()
resumo_medidas
resumo_medidas %>% View()
resumo_medidas %>% as.data.frame()
resumo_medidas <- list()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
collect()
resumo_medidas
resumo_medidas %>% View()
resumo_medidas <- list()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist()
}
resumo_medidas <- list()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
head() %>%
unlist()
lapply(resumo_medidas, function(item) item[1]) %>% unlist() %>% as.data.frame()
resumo_medidas[coluna]  <- df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
as.data.frame()
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
as.data.frame()
resumo_medidas <- data.frame()
resultado <- data.frame()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resultado <- cbind(coluna,
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
as.data.frame())
resumo_medidas <- rbind(resumo_medidas,resultado)
}
resumo_medidas
resumo_medidas %>% View()
resumo_medidas$media %>% as.integer()
resumo_medidas$media %>% as.double()
#Usando a função agg
colunas_numeric <- cbind(coltypes(df),colnames(df)) %>%
as.data.frame %>%
dplyr::filter(.$V1=="numeric") %>%
dplyr::select(medidas=V2)
resumo_medidas <- data.frame()
resultado <- data.frame()
for (coluna in colunas_numeric$medidas){
#As colunas no dataframe são linhas neste relatório
#Foi necessário criar uma condição para evitar a inclusão de textos (erros) no resultado.
resultado <- cbind(coluna,
df_sample %>% agg(.,
media = avg(.[[coluna]]),
desvio_padrao = sd(.[[coluna]]),
variancia = var(.[[coluna]]),
maximo = max(.[[coluna]]),
minimo = min(.[[coluna]])) %>%
as.data.frame())
resumo_medidas <- rbind(resumo_medidas,resultado)
}
#Print da tabela com a contabilização dos problemas.
resumo_medidas %>% kable(., format = "html",row.names = T, digits = 2) %>%
kable_styling(bootstrap_options = c("striped","hover","condensed","responsive"))
#Usando agg com agregação
# gb_sn <- groupBy(df_sample, df_sample$CODIGO_RODA)
# df2 <- agg(gb_sn, friso_avg = avg(df_sample$ESPESSURA_FRISO_RODA), count = n(df_sample$ESPESSURA_FRISO_RODA))
# head(df2)
